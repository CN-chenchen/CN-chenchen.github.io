<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Artin&#39;s Blog</title>
    <link>https://lengthmin.me/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Python / 前端 / 机器学习</description>
    <pubDate>Fri, 03 May 2019 15:43:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>为什么我们需要配置环境变量</title>
      <link>https://lengthmin.me/posts/why-do-we-need-to-configure-environment-variables/</link>
      <guid>https://lengthmin.me/posts/why-do-we-need-to-configure-environment-variables/</guid>
      <pubDate>Sat, 27 Apr 2019 16:03:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;之前学习Java的时候，感觉最难做的一件事情就是配置jdk的环境。那叫一个困难啊，Path, JAVA_HOME, CLASSPATH 印象深刻的很…（但是现在JDK11不用再配置classpath了，jre和jdk合并了）&lt;br&gt;
就在去年暑假，要&lt;a href=&quot;/posts/install-opencv-windows-vs/&quot;&gt;配OpenCV的环境&lt;/a&gt;，要调的东西还是比较多的，对环境配置的概念又加深了。&lt;br&gt;
现在懂的多了，配过的环境也多了，配过的平台也不算少。现在就想分享一下 关于我对配环境这件事情的感受。&lt;/p&gt;
&lt;p&gt;那就以 Windows 来说说环境配置的问题，Linux 下的其实差不多。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>之前学习Java的时候，感觉最难做的一件事情就是配置jdk的环境。那叫一个困难啊，Path, JAVA_HOME, CLASSPATH 印象深刻的很…（但是现在JDK11不用再配置classpath了，jre和jdk合并了）<br>就在去年暑假，要<a href="/posts/install-opencv-windows-vs/">配OpenCV的环境</a>，要调的东西还是比较多的，对环境配置的概念又加深了。<br>现在懂的多了，配过的环境也多了，配过的平台也不算少。现在就想分享一下 关于我对配环境这件事情的感受。</p><p>那就以 Windows 来说说环境配置的问题，Linux 下的其实差不多。</p><a id="more"></a><h2 id="为什么需要环境变量"><a class="markdownIt-Anchor" href="#为什么需要环境变量">#</a> 为什么需要环境变量</h2><p>我记得计算机网络的老师在给我们讲 ip/mac地址 的时候提过一个例子：</p><blockquote><p>你刚到这个班，班里都是新同学，你想找班里的小明同学该怎么办？<br>答：在班里喊一声小明。这当然可以，小明肯定会响应你。对局域网来说也是如此。<br>但是，如果有一张座位表，上面有每个同学的座位信息，你想找到某个人是不是就很简单了。</p></blockquote><p>环境变量也是如此，也很适合这个例子。<br>当用户在 cmd 中执行一个命令的时候，命令行的解释器就会去找你要执行的命令。<br>那么是去哪里找可执行的命令呢？两个地方：</p><ul><li>当前路径下的可执行文件</li><li>环境变量Path中保存的路径下的可执行文件（包括系统变量和用户变量）</li></ul><h2 id="举个例子"><a class="markdownIt-Anchor" href="#举个例子">#</a> 举个例子</h2><p>举个栗子：<br><code>win + r</code>大家都用过吧，经常用来快速运行某些程序，比如打开命令行窗口我们就会用到：<br><img src="https://i.loli.net/2019/05/02/5ccafd6ee176b.png" alt="打开 cmd"></p><p>那电脑是怎么知道cmd在哪儿的呢？<br><img src="https://i.loli.net/2019/05/02/5ccafe08db5ec.png" alt="在Everything搜索cmd.exe"><br>能看到 <code>cmd.exe</code> 是在 <code>C:\Windows\System32\</code>和 <code>C:\Windows\SysWOW64\</code> 这两个路径下都有的，那就是说，电脑是去这两个路径之一打开的<code>cmd.exe</code>，那我们来看一下，系统环境变量里到底有没有这两个路径的其中一个呢？</p><p>查看一下系统的环境变量中的Path是不是有这个路径：<br>在小娜的输入框里输入 <code>path</code> 或者 <code>环境</code> 可以直接跳转到修改环境变量的地方，不行的话只能在计算机图标右键属性了。<br><img src="https://i.loli.net/2019/05/02/5ccb0002c8879.png" alt="我的环境变量"><br>可以验证了吧~<br>所以这个流程我们也弄清楚了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你在运行窗口输入 cmd：</span><br><span class="line">    -&gt; 解释器去寻找这个文件：</span><br><span class="line">        -&gt; 先寻找当前路径下是否有</span><br><span class="line">        -&gt; 再寻找环境变量中的Path保存的路径是否有</span><br><span class="line">    -&gt; 没找到就报没找到</span><br></pre></td></tr></table></figure><p>所以如果你没配置某个可执行文件到Path里，那你就得手动输入该文件的绝对路径才能打开了。<br>比如说 Java…</p><h2 id="path-外的其他字段"><a class="markdownIt-Anchor" href="#path-外的其他字段">#</a> Path 外的其他字段</h2><p>其他的一些字段也是方便我们使用的，想用的时候使用 <code>%字段名%</code> 就能调用了。<br>比如说我在系统设置里设置了 <code>CMDER_ROOT</code> 字段，将其赋值为<code>D:\0ArtinD\cmder</code>，这是一个路径。<br><img src="https://i.loli.net/2019/05/02/5ccb026a1dbfb.png" alt="设置 CMDER_ROOT"><br>然后我想打开该路径，就可以使用该字段名啦：<br><img src="https://i.loli.net/2019/05/02/5ccb03181acf2.png" alt="Snipaste_2019-05-02_22-47-37"></p><p>简单来说！就是编程中的变量名。定义一个常量，想用的时候可以使用。</p><h2 id="用户变量和系统变量"><a class="markdownIt-Anchor" href="#用户变量和系统变量">#</a> 用户变量和系统变量</h2><p>操作系统中有用户的概念。<br>用户变量只对当前登录的用户生效。<br>系统变量对当前计算机的所有用户生效。</p>]]></content:encoded>
      
      <comments>https://lengthmin.me/posts/why-do-we-need-to-configure-environment-variables/#disqus_thread</comments>
    </item>
    
    <item>
      <title>安装 nvm 与 nodejs</title>
      <link>https://lengthmin.me/posts/install-nvm/</link>
      <guid>https://lengthmin.me/posts/install-nvm/</guid>
      <pubDate>Fri, 19 Apr 2019 09:17:33 GMT</pubDate>
      <description>
      
        &lt;p&gt;在网上看到nvm这个神器之后，最近装Nodejs都是用nvm来装了。&lt;br&gt;
刚好又装了 Linux Mint ，重新在Linux下安装一遍nvm。Windows 上也有的类似工具&lt;a href=&quot;https://github.com/coreybutler/nvm-windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nvm-windows&lt;/a&gt;，使用方法都差不多。&lt;br&gt;
github 链接： &lt;a href=&quot;https://github.com/creationix/nvm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/creationix/nvm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nvm 是 nodejs 的一个版本控制工具，也就是 “Node Version Manager” 的三个首字母。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在网上看到nvm这个神器之后，最近装Nodejs都是用nvm来装了。<br>刚好又装了 Linux Mint ，重新在Linux下安装一遍nvm。Windows 上也有的类似工具<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>，使用方法都差不多。<br>github 链接： <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a></p><p>nvm 是 nodejs 的一个版本控制工具，也就是 “Node Version Manager” 的三个首字母。</p><a id="more"></a><h1 id="安装-nvm"><a class="markdownIt-Anchor" href="#安装-nvm">#</a> 安装 nvm</h1><h2 id="安装和升级-nvm"><a class="markdownIt-Anchor" href="#安装和升级-nvm">#</a> 安装和升级 nvm</h2><p>要安装或升级 nvm, 可以使用官方给的一个脚本：<br>官方目前的版本号是 <code>v0.34.0</code>。<br>你可以去上面给的链接里去安装最新的。<br>可以使用curl：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>或者 wget:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>这个脚本会克隆 nvm 的远程仓库到 <code>~/.nvm</code> 路径下，并且会将添加激活代码到你终端的配置文件中。</p><p>执行完这条命令之后，一切就安装好了。<br>But in China, 你还需要配置一下代理。</p><h3 id="配置-git-代理"><a class="markdownIt-Anchor" href="#配置-git-代理">#</a> 配置 git 代理</h3><p>我本地使用的是 electron-ssr，代理的地址是 <code>socks5://127.0.0.1:1080</code>。<br>执行下面这个命令，就可以针对github设置代理了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 只对github.com</span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"># 取消代理</span><br><span class="line">git config --global --unset http.https://github.com.proxy</span><br></pre></td></tr></table></figure><blockquote><p>注意哦，这种方式不支持 ssh 方式的代理，那个需要另外配置。在这里就不多讲，我会再写一篇博客来讲配置 ssh 的代理。</p></blockquote><p>使用命令行的配置等效于修改个人目录下的 <code>.gitconfig</code> 文件。 Windows/Linux 都可以。<br>也就是说，可以通过修改 <code>~/.gitconfig</code> 达到一样的效果：<br>加入下面这块代码就可以了。Windows同理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[http &quot;https://github.com&quot;]</span><br><span class="line">        proxy = socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure><h3 id="配置终端代理"><a class="markdownIt-Anchor" href="#配置终端代理">#</a> 配置终端代理</h3><p>因为终端里的命令是不走系统代理的，可以使用 proxychains4 等软件代理命令。<br>配置好 proxychains4 后，使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>就安装好了。</p><h2 id="配置-zsh"><a class="markdownIt-Anchor" href="#配置-zsh">#</a> 配置 zsh</h2><p>安装好 nvm 后，发现我本机只把启动的配置写入到 <code>~/.bashrc</code> 而已，手动将配置复制到<code>~/.zshrc</code>中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p>然后执行 <code>source ~/.zshrc</code>，即可</p><h1 id="安装-nodejs"><a class="markdownIt-Anchor" href="#安装-nodejs">#</a> 安装 nodejs</h1><h2 id="配置-nvm-下载来源"><a class="markdownIt-Anchor" href="#配置-nvm-下载来源">#</a> 配置 nvm 下载来源</h2><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br></pre></td></tr></table></figure><p>将下载来源设置为国内淘宝镜像。</p><h2 id="nvm-安装-nodejs"><a class="markdownIt-Anchor" href="#nvm-安装-nodejs">#</a> nvm 安装 nodejs</h2><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装node稳定版</span></span><br><span class="line">nvm install stable</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装node最新版</span></span><br><span class="line">nvm install node</span><br></pre></td></tr></table></figure><p>就是这么简单～～～</p><h2 id="nvm-基本使用"><a class="markdownIt-Anchor" href="#nvm-基本使用">#</a> nvm 基本使用</h2><p>详见：<a href="https://github.com/creationix/nvm#usage" target="_blank" rel="noopener">https://github.com/creationix/nvm#usage</a><br>我自己使用的就几个命令，其实也就掌握这几个命令就够用了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvm list # 展示可下载的版本</span><br><span class="line">nvm install 10.10.0 # 安装对应版本</span><br><span class="line">nvm use 10.10.0 # 使用对应版本</span><br><span class="line">nvm which 10.10.0 # 查看对应版本的安装目录</span><br></pre></td></tr></table></figure><h2 id="配置-npm-国内源"><a class="markdownIt-Anchor" href="#配置-npm-国内源">#</a> 配置 npm 国内源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g mirror-config-china --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>一下就可以配置好 好几个国内源～</p><p>That’s All.</p>]]></content:encoded>
      
      <comments>https://lengthmin.me/posts/install-nvm/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ACM 输入输出语句</title>
      <link>https://lengthmin.me/posts/acm-io/</link>
      <guid>https://lengthmin.me/posts/acm-io/</guid>
      <pubDate>Tue, 31 Jul 2018 05:52:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;一些自己用的输入输出语句。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>一些自己用的输入输出语句。</p><a id="more"></a><h2 id="java中在oj上怎么实现多组输入"><a class="markdownIt-Anchor" href="#java中在oj上怎么实现多组输入">#</a> JAVA中在OJ上怎么实现多组输入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(sc.hasNext()) &#123;</span><br><span class="line">    <span class="keyword">double</span> a = sc.nextDouble();</span><br><span class="line">    <span class="keyword">int</span> a1 = (<span class="keyword">int</span>)a;</span><br><span class="line">    <span class="keyword">int</span> a2 = (<span class="keyword">int</span>)(a*<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">if</span>(a1* <span class="number">1000</span> &lt; a2) &#123;</span><br><span class="line">    System.out.println(<span class="string">"No"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"Yes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c中在oj上怎么实现多组输入"><a class="markdownIt-Anchor" href="#c中在oj上怎么实现多组输入">#</a> C中在OJ上怎么实现多组输入</h2>]]></content:encoded>
      
      <comments>https://lengthmin.me/posts/acm-io/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows10 配置 OpenCV3.4.1 + Visual Studio</title>
      <link>https://lengthmin.me/posts/install-opencv-windows-vs/</link>
      <guid>https://lengthmin.me/posts/install-opencv-windows-vs/</guid>
      <pubDate>Fri, 29 Jun 2018 07:54:41 GMT</pubDate>
      <description>
      
        &lt;p&gt;Windows下安装OpenCV以及配环境的事情，对于VS来说一点都不麻烦，简单几步就可以让VS使用OpenCV。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Windows下安装OpenCV以及配环境的事情，对于VS来说一点都不麻烦，简单几步就可以让VS使用OpenCV。</p><a id="more"></a><h2 id="下载opencv"><a class="markdownIt-Anchor" href="#下载opencv">#</a> 下载OpenCV</h2><ul><li>OpenCV的下载链接：[<a href="https://opencv.org/releases.html" target="_blank" rel="noopener">https://opencv.org/releases.html</a>]<br>选择 Windows 版本的下载。</li></ul><p>下载下来是一个<code>.exe</code>格式的可执行文件，运行之后选择 OpenCV 的安装目录就可以。<br>我选的是<code>c:/opencv</code>，之后的教程都是有关这个目录的。</p><h2 id="配置系统变量"><a class="markdownIt-Anchor" href="#配置系统变量">#</a> 配置系统变量</h2><p>打开系统设置界面（可以在小娜上输入<code>系统设置</code>），小娜就会帮你打开高级系统设置，点击环境变量，在系统变量的Path一栏中新建两个:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\opencv\build\bin</span><br><span class="line">C:\opencv\build\x64\vc14\bin</span><br></pre></td></tr></table></figure><p>打开VS，创建一个项目<br>属性页：<br>VC++目录：<br>包含文件目录：</p><ul><li>C:\opencv\build\include\</li><li>C:\opencv\build\include\opencv2</li><li>C:\opencv\build\include\opencv</li></ul><p>库目录：</p><ul><li>C:\opencv\build\x64\vc14\lib</li></ul><p>链接器：<br>输入：<br>附加依赖项：opencv_world341d.lib</p><p>如果是release的话就是把d去掉opencv_world341.lib</p><h2 id="测试"><a class="markdownIt-Anchor" href="#测试">#</a> 测试</h2><p>测试一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cv.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"highgui.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IplImage* src = cvLoadImage(<span class="string">"C:\\1.png"</span>);<span class="comment">//此处的路径，一定是绝对路径，相对路径会报错的</span></span><br><span class="line">cvNamedWindow(<span class="string">"showImage"</span>);</span><br><span class="line">cvShowImage(<span class="string">"showImage"</span>, src);</span><br><span class="line">cvWaitKey(<span class="number">0</span>);</span><br><span class="line">cvReleaseImage(&amp;src);</span><br><span class="line">cvDestroyWindow(<span class="string">"showImage"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lengthmin.me/posts/install-opencv-windows-vs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何创建一个更好的Hexo使用体验</title>
      <link>https://lengthmin.me/posts/to-build-a-better-hexo/</link>
      <guid>https://lengthmin.me/posts/to-build-a-better-hexo/</guid>
      <pubDate>Wed, 17 Jan 2018 02:24:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;我经常在webide更新博客，但这只限于有网络的情况下。想本地调试的话，在没网之前就需要把源文件同步到本地来。这个功能用&lt;code&gt;git&lt;/code&gt;来实现会非常好。&lt;br&gt;
大概的思路就是在博客的仓库创建一个分支来备份源文件。&lt;br&gt;
在部署网页之前可以先把源文件同步到备份分支，然后需要的时候本地拉取回来。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>我经常在webide更新博客，但这只限于有网络的情况下。想本地调试的话，在没网之前就需要把源文件同步到本地来。这个功能用<code>git</code>来实现会非常好。<br>大概的思路就是在博客的仓库创建一个分支来备份源文件。<br>在部署网页之前可以先把源文件同步到备份分支，然后需要的时候本地拉取回来。</p><a id="more"></a><hr><h2 id="备份到仓库"><a class="markdownIt-Anchor" href="#备份到仓库">#</a> 备份到仓库</h2><p>你需要安装好git。<br>首先，你要在博客根目录下添加远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git remote add [shortname] [url]</span></span><br><span class="line"><span class="comment"># [shortname] 设置仓库的名称</span></span><br><span class="line"><span class="comment"># [url] 远程仓库的链接</span></span><br><span class="line">git remote add hexo https://git.coding.net/Artin/Artin.git</span><br></pre></td></tr></table></figure><p>然后创建一个新的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch backup</span><br></pre></td></tr></table></figure><p>切换到backup分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout backup</span><br></pre></td></tr></table></figure><p>然后在博客根目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -am &quot;update&quot;</span><br><span class="line">git push hexo backup</span><br></pre></td></tr></table></figure><p>你可以去看看<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的git教程</a><br>关于push主题失败的同学，把主题中的.git给删掉就ok了</p><hr><h2 id="更加便携的方法"><a class="markdownIt-Anchor" href="#更加便携的方法">#</a> 更加便携的方法</h2><p>这个主意我只在ubuntu下试过。<br>首先，在博客根目录创建一个<code>git.sh</code><br>在里面输入如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash/</span></span><br><span class="line"><span class="comment"># 这里的路径是你的博客的路径</span></span><br><span class="line"><span class="built_in">cd</span> /home/ubuntu/workspace/hexo/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"执行hexo clean"</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hexo clean 执行完毕"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"推送源代码"</span></span><br><span class="line">git add .</span><br><span class="line">git commit -am <span class="string">"update"</span></span><br><span class="line">git push hexo master</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"推送源代码 执行完毕"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"执行hexo g -d"</span></span><br><span class="line">hexo g -d</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hexo g -d 执行完毕"</span></span><br></pre></td></tr></table></figure><p>以后想要更新博客，直接在博客根目录下输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh git.sh</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lengthmin.me/posts/to-build-a-better-hexo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用coding提供的动态pages来制作一个自己的rss订阅</title>
      <link>https://lengthmin.me/posts/tinytinyrss/</link>
      <guid>https://lengthmin.me/posts/tinytinyrss/</guid>
      <pubDate>Mon, 15 Jan 2018 06:31:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;2019 年 2 月 17 日 16:20:57 更新：&lt;br&gt;
已经失效了！！&lt;br&gt;
已经失效了！！&lt;br&gt;
已经失效了！！&lt;/p&gt;
&lt;p&gt;现在部署可以一键部署了，但是已经无法获取更新了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;failed to open stream: no suitable wrapper could be found&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;先说结论，不够好用，弃坑了，用国内的一览提供的 rss 服务。&lt;br&gt;
多平台支持，和 inoreader 相比速度更快，而且对于目前我订阅的源来说并没有不可阅读的，而且在 inoreader 上看不了電腦玩物的图片，在一览上没问题的。&lt;/p&gt;
&lt;h2 id=&quot;关于-ttrss&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于-ttrss&quot;&gt;#&lt;/a&gt; 关于 ttrss&lt;/h2&gt;
&lt;p&gt;因为很喜欢关注科技界的新闻，需要一个聚合来看新闻的软件。&lt;br&gt;
说不上是 rss 重度使用者吧，但是还是每天必刷新闻的&lt;br&gt;
用了各种新闻软件之后，发现 rss 才是正道，不会被推荐打扰，就订阅那么几个源。每天刷一刷。&lt;br&gt;
现在微信公众号几乎都不怎么看了，二者功能几乎重复哈哈哈哈哈&lt;/p&gt;
&lt;p&gt;ttrss 即为 tinytinyrss(&lt;a href=&quot;https://tt-rss.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tt-rss.org/&lt;/a&gt;)&lt;br&gt;
可以自己控制的自定义项较多的 rss 服务，&lt;br&gt;
多平台支持&lt;br&gt;
android 上推荐 feedme，最新的 3.5.1 版本支持了 tinytinyrss，体验很好。&lt;br&gt;
之前用 inoreader 的时候就用的 feedme，已通过 play 请开发者吃了个苹果哈哈哈哈哈，&lt;br&gt;
tinytinyrss 也就是在 php 环境下安装的，pc 上用浏览器打开就可以了。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>2019 年 2 月 17 日 16:20:57 更新：<br>已经失效了！！<br>已经失效了！！<br>已经失效了！！</p><p>现在部署可以一键部署了，但是已经无法获取更新了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed to open stream: no suitable wrapper could be found</span><br></pre></td></tr></table></figure><hr><p>先说结论，不够好用，弃坑了，用国内的一览提供的 rss 服务。<br>多平台支持，和 inoreader 相比速度更快，而且对于目前我订阅的源来说并没有不可阅读的，而且在 inoreader 上看不了電腦玩物的图片，在一览上没问题的。</p><h2 id="关于-ttrss"><a class="markdownIt-Anchor" href="#关于-ttrss">#</a> 关于 ttrss</h2><p>因为很喜欢关注科技界的新闻，需要一个聚合来看新闻的软件。<br>说不上是 rss 重度使用者吧，但是还是每天必刷新闻的<br>用了各种新闻软件之后，发现 rss 才是正道，不会被推荐打扰，就订阅那么几个源。每天刷一刷。<br>现在微信公众号几乎都不怎么看了，二者功能几乎重复哈哈哈哈哈</p><p>ttrss 即为 tinytinyrss(<a href="https://tt-rss.org/" target="_blank" rel="noopener">https://tt-rss.org/</a>)<br>可以自己控制的自定义项较多的 rss 服务，<br>多平台支持<br>android 上推荐 feedme，最新的 3.5.1 版本支持了 tinytinyrss，体验很好。<br>之前用 inoreader 的时候就用的 feedme，已通过 play 请开发者吃了个苹果哈哈哈哈哈，<br>tinytinyrss 也就是在 php 环境下安装的，pc 上用浏览器打开就可以了。</p><a id="more"></a><h2 id="关于-coding-的动态-pages"><a class="markdownIt-Anchor" href="#关于-coding-的动态-pages">#</a> 关于 coding 的动态 pages</h2><p>coding 提供了免费的动态 pages，可以用来架设自己的个人动态博客。<br>但是我最近在 rss 服务选择上犯了选择困难证，刚好想到之前看到过 ttrss<br>coding 提供了 php+mysql 的环境，于是想试一试。<br>要准备的东西：</p><ul><li>coding webide</li><li>coding pages</li><li>baidu <strong>or</strong> google</li></ul><hr><h2 id="安装-tinytinyrss"><a class="markdownIt-Anchor" href="#安装-tinytinyrss">#</a> 安装 tinytinyrss</h2><p>首先你需要注册一个 coding 的账户<br><a href="https://coding.net/" target="_blank" rel="noopener">coding.net</a></p><h3 id="创建一个仓库备用"><a class="markdownIt-Anchor" href="#创建一个仓库备用">#</a> 创建一个仓库备用</h3><p><img src="https://user-images.githubusercontent.com/13938334/52909564-6838a680-32c5-11e9-9be8-5628f3350c95.png" alt="image"></p><p>这里会显示当前的仓库地址，复制留着备用。<br>ssh 或者 https 都可以。<br>ssh 要先配置好 ssh 的权限。</p><h3 id="下载-tt-rss-的源码传到-git-上"><a class="markdownIt-Anchor" href="#下载-tt-rss-的源码传到-git-上">#</a> 下载 tt-rss 的源码传到 git 上</h3><h4 id="使用-git-clone"><a class="markdownIt-Anchor" href="#使用-git-clone">#</a> 使用 git clone</h4><p>tiny 是一个开源项目，项目链接：<a href="https://git.tt-rss.org/fox/tt-rss" target="_blank" rel="noopener">https://git.tt-rss.org/git/tt-rss/src/master</a><br>如果你的电脑没装 git 的话建议用 coding 提供的 webide，秒开很省心，而且 push 代码的时候很快很快的。免费用户可以可且仅可开一个。<br>在安卓平台上也有提供 linux 终端的的软件，如 NeoTerm 和 Termux。<br>先把源代码 clone 到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://git.tt-rss.org/git/tt-rss.git</span><br></pre></td></tr></table></figure><p>克隆好后，修改<code>/tt-rss/.git/config</code>文件里的 remote url 为你的仓库地址(图里红框的位置)，仓库地址刚刚创建的时已经显示出来了<br><img src="https://i.loli.net/2018/01/15/5a5c3e29a6434.png" alt="Snipaste_2018-01-15_13-35-55.png"></p><blockquote><p>无法克隆的可以直接去版本发布中下载最新版。<a href="https://git.tt-rss.org/fox/tt-rss/releases" target="_blank" rel="noopener">https://git.tt-rss.org/fox/tt-rss/releases</a></p></blockquote><hr><h4 id="直接上传-zip-包"><a class="markdownIt-Anchor" href="#直接上传-zip-包">#</a> 直接上传 zip 包</h4><p>在这里下载最新的版本。<br><a href="https://git.tt-rss.org/fox/tt-rss/releases" target="_blank" rel="noopener">https://git.tt-rss.org/fox/tt-rss/releases</a><br>解压之后可以看到本地多了一个<code>tt-rss</code>的文件夹，打开文件夹。<br>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add 你创建的仓库地址</span><br><span class="line">git add -A .</span><br><span class="line">git commit -am "upload tt-rss"</span><br></pre></td></tr></table></figure><p>比如我的就是:<br><img src="https://user-images.githubusercontent.com/13938334/52909625-94a0f280-32c6-11e9-9cc3-3e689e0fe950.png" alt="image"></p><p>如果执行完 commit 发现有提示 <code>Please tell me who you are.</code><br>就按照提示设置自己的邮箱和用户名。<br>设置完之后再执行一遍最后一句<code>commit</code>。<br>出现一堆<code>create mode xxx</code>的提示就可以了。</p><h4 id="设置文件权限"><a class="markdownIt-Anchor" href="#设置文件权限">#</a> 设置文件权限</h4><p>在这步有一个小问题，需要把目录下的每个文件的权限都设置成 777,否则后面会遇到文件无法读写导致站点无法访问的问题。<br>在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 .</span><br></pre></td></tr></table></figure><p>保存好后就可以 push 到仓库里了，</p><blockquote><p>如果你创建仓库的时候勾选了<code>使用readme初始化仓库</code>，那么你在 push 的时候会遇到文件冲突。<br>方法是：修改了仓库地址之后先把本地的 <a href="http://readme.md" target="_blank" rel="noopener">readme.md</a> 删除掉，<br>然后使用<code>git pull</code>将远程仓库的 <a href="http://readme.md" target="_blank" rel="noopener">readme.md</a> 拉回本地。</p></blockquote><p>push 的方法很简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tt-rss <span class="comment">#进入你的ttrss文件夹下使用下面的命令</span></span><br><span class="line"><span class="comment"># 不需要进行 add 和 commit</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/13938334/52909675-61ab2e80-32c7-11e9-8950-2cda85122c5e.png" alt="image"></p><p>输入你的用户名密码就可以了，一般来说输入密码的时候是不可见的，不用担心。</p><h3 id="开启动态-pages"><a class="markdownIt-Anchor" href="#开启动态-pages">#</a> 开启动态 Pages</h3><p>打开你的仓库，在侧边上选择 pages,然后选择 tab 上的<strong>动态 Pages</strong><br><img src="https://i.loli.net/2018/01/15/5a5c4125bfd47.png" alt="Snipaste_2018-01-15_13-50-12.png"><br><strong>一定要等待部署完成后才能使用</strong></p><h3 id="配置-tinyrss"><a class="markdownIt-Anchor" href="#配置-tinyrss">#</a> 配置 tinyrss</h3><p>部署完成后打开上面给的链接，会来到<br><code>http://969983a8-4bea-4d25-bab5-2ac8183353ad.coding.io/install/</code><br>要开始对 tiny 的配置了，在仓库的 pages 页面有数据库的连接信息，按相应的填到框中就可以了。<br><img src="https://i.loli.net/2018/01/15/5a5c435383b2d.png" alt="Snipaste_2018-01-15_13-56-34.png"></p><p>如果不需要改访问目录的话就直接点<code>Test configuration</code><br>然后<code>Initialize database</code>就可以了</p><p><img src="https://i.loli.net/2018/01/15/5a5c435390342.png" alt="Snipaste_2018-01-15_13-58-09.png"></p><p>在<code>Generated configuration file</code>这一步，不要点击<strong>Save configuration</strong>，我们自己创建一个。方便我们之后调整 config<br>在刚刚的<code>tt-rss</code>目录下创建<code>config.php</code>，将图中文本框的内容复制进去<br>打开<code>.gitignore</code>文件，把 config,php 字样去掉才能 push，否则 git 会忽视这个文件。<br>继续将修改好的代码 push 到仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"push config.php"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>等待再次部署好<br>就可以访问了，默认的用户名密码为<code>admin</code>和<code>password</code></p><h3 id="更好用的-tinytiny"><a class="markdownIt-Anchor" href="#更好用的-tinytiny">#</a> 更好用的 tinytiny</h3><p>进去之后会让你改密码。<br>设置中有很多选项，也有很多插件，大家可以百度一下。<br>你需要启用 API 访问才能使用第三方客户端登陆。<br>推荐关闭<code>在连续模式下自动展开文章</code>和<code>合并信息源，使之连续显示</code><br>总之自己使用吧，还是很好玩的。</p>]]></content:encoded>
      
      <comments>https://lengthmin.me/posts/tinytinyrss/#disqus_thread</comments>
    </item>
    
    <item>
      <title>来用用双拼吧</title>
      <link>https://lengthmin.me/posts/use-shuangpin/</link>
      <guid>https://lengthmin.me/posts/use-shuangpin/</guid>
      <pubDate>Fri, 02 Dec 2016 14:21:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;Hello everybody,long time no see.&lt;/p&gt;
&lt;p&gt;时隔数月，终于更了第二篇文章，现在我想介绍一种输入方法，不同于平时使用的全拼，叫双拼，双拼和全拼或五笔一样，是一种输入方法 。&lt;/p&gt;
&lt;p&gt;双拼是用&lt;code&gt;定义好的单字母&lt;/code&gt;代替&lt;code&gt;较长的多字母韵母或声母&lt;/code&gt;来进行输入的一种方法。&lt;br&gt;
比如说我想用拼音打 程序员，用全拼方案就要打&lt;code&gt;&amp;quot;cheng xv yuan&amp;quot;&lt;/code&gt;，而用小鹤双拼方案只需要打&lt;code&gt;&amp;quot;ig xu yr&amp;quot;&lt;/code&gt;，比全拼的效率高了不少。&lt;br&gt;
这篇文章只是介绍一下双拼就直接带你入门，而我也只是个初级使用者，还有很多更高级的使用方法就靠你自己学了。&lt;br&gt;
文章后会给几个链接，搭配本文食用更佳。&lt;/p&gt;
&lt;p&gt;实际使用感受我只能说：比全拼打的快，比五笔学的快。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Hello everybody,long time no see.</p><p>时隔数月，终于更了第二篇文章，现在我想介绍一种输入方法，不同于平时使用的全拼，叫双拼，双拼和全拼或五笔一样，是一种输入方法 。</p><p>双拼是用<code>定义好的单字母</code>代替<code>较长的多字母韵母或声母</code>来进行输入的一种方法。<br>比如说我想用拼音打 程序员，用全拼方案就要打<code>&quot;cheng xv yuan&quot;</code>，而用小鹤双拼方案只需要打<code>&quot;ig xu yr&quot;</code>，比全拼的效率高了不少。<br>这篇文章只是介绍一下双拼就直接带你入门，而我也只是个初级使用者，还有很多更高级的使用方法就靠你自己学了。<br>文章后会给几个链接，搭配本文食用更佳。</p><p>实际使用感受我只能说：比全拼打的快，比五笔学的快。</p><a id="more"></a><hr><h2 id="概念"><a class="markdownIt-Anchor" href="#概念">#</a> 概念</h2><p>先来一段百科上的：</p><blockquote><p>双拼是一种建立在拼音输入法基础上的输入方法，可视为全拼的一种改进，它通过将汉语拼音中每个含多个字母的声母或韵母各自映射到某个按键上，使得每个音都可以用最多两次按键打出，极大地提高了拼音输入法的输入速度。(此处说的只是拼音输入法…)</p></blockquote><blockquote><p>现在常见的方案包括小鹤双拼、微软拼音 2003、智能 ABC、拼音加加、紫光双拼、搜狗双拼、自然码、小熊双拼、大牛双拼等方案。这些方案的主要区别在于韵母的键位安排。双拼是用定义好的单字母代替较长的多字母韵母或声母来进行输入的一种方式。例如: 如果 T=t，M=ian，键入两个字母&quot;TM&quot;就会输入拼音&quot;tian&quot;。使用双拼可以减少击键次数，虽然需要记忆字母对应的键位，但是熟练之后效率会有一定提高。如果使用双拼，要在设置属性窗口把双拼选上即可。特殊拼音的双拼输入规则有:对于单韵母字，需要在前面输入字母 O+韵母。例如:输入 OA→A，输入 OO→O，输入 OE→E。而在自然码双拼方案中，和自然码输入法的双拼方式一致，对于单韵母字，需要输入双韵母，例如:输入 AA→A，输入 OO→O，输入 EE→E。</p></blockquote><p>第一次知道双拼是看了少数派的一篇文章<a href="http://sspai.com/32809/" target="_blank" rel="noopener">做少数派中的少数派：双拼输入快速入门</a>，里面推荐的是用<strong>小鹤双拼</strong>，就一直在用 (其实也就学习了这么一种…)。很多输入法都支持小鹤双拼的，当然也支持其他的双拼。</p><h2 id="学习使我快乐"><a class="markdownIt-Anchor" href="#学习使我快乐">#</a> 学习使我快乐</h2><p>学双拼要记得住每个键对应的声母和韵母，这有张小鹤的码表，同学你一定要记住它。<br><img src="http://www.flypy.com/images/hejp.png" alt="键位图"><br>当时想着能在空余时间练习一下。于是用草稿纸画了一张上面那个图，事实证明这招很有效，放在桌上慢慢打字练手感，这个表和小鹤双拼的口诀 已经是要学习的全部内容。一开始我也背了这个口诀，后来打熟练了就能记住键位了，口诀也忘了…：</p><blockquote><p>Kuai ing Liang uang Ruan Cao Zou T ue Qiu Yun Wei Jan Mian</p></blockquote><blockquote><p>快 迎 两 王 软 草 走， 特 约 秋 云 为 见 面。</p></blockquote><blockquote><p>Xia ua Song iong shU chI zhVi Geng Dai Bin Niao Fen Pie Hang</p></blockquote><blockquote><p>夏 娃 怂 恿 书 痴 追， 更 待 滨 鸟 分 撇 航？</p></blockquote><p>把这首小诗结合上面的键位图看一下，就能看懂了。<br>比如说<code>Kuai ing</code>就是<code>K</code>这个键作韵母时对应两个韵母<code>uai</code>和<code>ing</code>。<br>举个例子：</p><ul><li>我打&quot;快&quot; 我要按的键是&quot;kk&quot; <code>k</code> + <code>uai</code></li><li>我打&quot;赢&quot; 我要按的键是&quot;yk&quot; <code>y</code> + <code>ing</code></li></ul><hr><h2 id="练习"><a class="markdownIt-Anchor" href="#练习">#</a> 练习</h2><p>先介绍个在线练习的网站：<strong>双拼在线练习 - <a href="http://typing.sjz.io" target="_blank" rel="noopener">typing.sjz.io</a></strong>，请使用 pc 端浏览器进入。</p><ul><li>练习使用键盘： <a href="http://typing.sjz.io/#/keyboard/" target="_blank" rel="noopener">http://typing.sjz.io/#/keyboard/</a></li><li>练习打文章： <a href="http://typing.sjz.io/#/article/" target="_blank" rel="noopener">http://typing.sjz.io/#/article/</a></li></ul><p>** 推荐先打打古诗词，因为很多诗词都押韵。打起来比较爽快。</p><p>目前发现这个网站就是有些多音字的拼音处理的不好，标出来的不是正确的读音，练习的时候需要注意拼音。还有就是说 文章字数太多可能会卡。</p><p>在下面可以下载到一个跟打器，可以本地练习打字的。</p><hr><h2 id="资源"><a class="markdownIt-Anchor" href="#资源">#</a> 资源</h2><ul><li><a href="http://flypy.com/" target="_blank" rel="noopener">小鹤官网</a></li><li><a href="http://tieba.baidu.com/f?kw=%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC&amp;ie=utf-8" target="_blank" rel="noopener">小鹤双拼贴吧</a></li><li><a href="http://flypy.ys168.com/" target="_blank" rel="noopener">小鹤官方资源网盘(跟打器在飞扬版目录下的打字练习文件夹内)</a></li></ul><hr><h2 id="一些链接"><a class="markdownIt-Anchor" href="#一些链接">#</a> 一些链接</h2><p>这里再给出我参考的一部分网址，感谢：</p><ul><li>官方贴吧的<a href="http://tieba.baidu.com/p/4844692703" target="_blank" rel="noopener">教程</a></li><li>少数派的<a href="http://sspai.com/32809/" target="_blank" rel="noopener">教程</a></li><li><a href="http://baike.so.com/doc/5949140-6162080.html" target="_blank" rel="noopener">360 百科</a></li></ul><hr><p>OK，That’s all.愿你能喜欢上双拼。</p>]]></content:encoded>
      
      <comments>https://lengthmin.me/posts/use-shuangpin/#disqus_thread</comments>
    </item>
    
    <item>
      <title>关于手贱执行了sudo git之后那些事</title>
      <link>https://lengthmin.me/posts/sudo-git-fix/</link>
      <guid>https://lengthmin.me/posts/sudo-git-fix/</guid>
      <pubDate>Fri, 22 Jul 2016 01:45:38 GMT</pubDate>
      <description>
      
        &lt;p&gt;在 Ubuntu 下用 git 的时候使用了&lt;code&gt;sudo git add&lt;/code&gt;命令，导致每次不使用&lt;code&gt;sudo&lt;/code&gt;前缀都无法对仓库进行操作。&lt;br&gt;
因为用了 sudo 之后普通用户组就没有操作的权限了。在 stackoverflow 找到了解决办法。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在 Ubuntu 下用 git 的时候使用了<code>sudo git add</code>命令，导致每次不使用<code>sudo</code>前缀都无法对仓库进行操作。<br>因为用了 sudo 之后普通用户组就没有操作的权限了。在 stackoverflow 找到了解决办法。</p> <a id="more"></a><p>首先我们要知道自己的用户和用户组的 id，在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id -a</span><br></pre></td></tr></table></figure><p>就能显示出来用户跟组的 id，<br><img src="https://i.loli.net/2018/01/25/5a697dd25ebc3.png" alt="Snipaste_2018-01-25_14-48-31.png"></p><p>接下来需要用 chown 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .git/objects</span><br><span class="line">ls -al</span><br><span class="line">sudo chown -R uid:groups *</span><br><span class="line"><span class="comment">## 将uid和groups换成你自己的</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lengthmin.me/posts/sudo-git-fix/#disqus_thread</comments>
    </item>
    
    <item>
      <title>为yelee主题加入腾讯分析</title>
      <link>https://lengthmin.me/posts/add-tencent-analytics-to-yelee/</link>
      <guid>https://lengthmin.me/posts/add-tencent-analytics-to-yelee/</guid>
      <pubDate>Fri, 15 Jul 2016 02:58:13 GMT</pubDate>
      <description>
      
        &lt;p&gt;hexo 的原生主题自带了谷歌分析,而谷歌分析在国内水土不服。琢磨琢磨，把 next 主题上的腾讯分析添加到了正在用的 yelee 主题上。&lt;br&gt;
顺带一提，腾讯分析真的是用过的最好用的站点统计软件。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>hexo 的原生主题自带了谷歌分析,而谷歌分析在国内水土不服。琢磨琢磨，把 next 主题上的腾讯分析添加到了正在用的 yelee 主题上。<br>顺带一提，腾讯分析真的是用过的最好用的站点统计软件。</p><a id="more"></a><p>用的主题是 yelee，没有腾讯分析，自己加了一个。<br>在<code>主题目录</code>下操作。<br>在<code>_config.yml</code>中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tencent-analytics:</span></span><br><span class="line"><span class="comment"># 在冒号后面配置你的腾讯分析id，id就是获取到的代码的数字部分</span></span><br></pre></td></tr></table></figure><p>在<code>layout/_partial/</code>中创建一个新的<code>tencent-analytics.ejs</code>文件,<br>加入如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.tencent_analytics)&#123; %&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://tajs.qq.com/stats?sId=&lt;%= theme.tencent_analytics %&gt;&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var _speedMark = new Date();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>上面的代码包括了腾讯分析了。<br>在<code>layout/_partial/</code>中修改<code>head.ejs</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#随便找一行添加如下代码，让用户在打开网页时加载腾讯分析。</span><br><span class="line">&lt;%- partial(&apos;tencent-analytics&apos;) %&gt;</span><br></pre></td></tr></table></figure><p>然后在主题的<code>_config.yml</code>中输入你的腾讯分析 id。<br>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>就 ok 了。</p>]]></content:encoded>
      
      <comments>https://lengthmin.me/posts/add-tencent-analytics-to-yelee/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用在线ide和pages服务搭建一个免费的Hexo博客</title>
      <link>https://lengthmin.me/posts/use-hexo-with-webide/</link>
      <guid>https://lengthmin.me/posts/use-hexo-with-webide/</guid>
      <pubDate>Sat, 21 May 2016 08:03:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;一直有着想写一点东西的想法，想有个自己的博客。但是现在国内的知名博客服务(某浪，CSXN)首页都是广告= = ，最后在知乎发现了 Hexo 这么个东西。&lt;br&gt;
自己就能搭建一个国内访问快无广告自定义颇多的炫酷博客。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Hexo&lt;/code&gt;&lt;/a&gt;是一个用 nodejs 编写的静态博客框架，可以将生成的静态博客网页托管在服务器上。&lt;/li&gt;
&lt;li&gt;国外的&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;github.com&lt;/code&gt;&lt;/a&gt;和国内的&lt;a href=&quot;https://coding.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;coding.net&lt;/code&gt;&lt;/a&gt; 都提供免费的 pages 服务，可以用托管博客。&lt;/li&gt;
&lt;li&gt;&lt;s&gt;&lt;a href=&quot;https://c9.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;c9.io&lt;/code&gt;&lt;/a&gt;提供免费的在线 webide 服务&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;好难过，评论说现在&lt;strong&gt;注册 c9 要绑定信用卡&lt;/strong&gt;了，这是真的这不是梦。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有网络就可以更新博客，只需要一个浏览器。&lt;/li&gt;
&lt;li&gt;源文件在云端，可下载回本地。&lt;/li&gt;
&lt;li&gt;可实时预览 markdown 文件。&lt;/li&gt;
&lt;li&gt;完善的 linux 终端,有 root 权限。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我在 c9 的 workspace：&lt;a href=&quot;https://ide.c9.io/lengthmin/hexo/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ide.c9.io/lengthmin/hexo/&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>一直有着想写一点东西的想法，想有个自己的博客。但是现在国内的知名博客服务(某浪，CSXN)首页都是广告= = ，最后在知乎发现了 Hexo 这么个东西。<br>自己就能搭建一个国内访问快无广告自定义颇多的炫酷博客。</p><ul><li><a href="https://hexo.io/" target="_blank" rel="noopener"><code>Hexo</code></a>是一个用 nodejs 编写的静态博客框架，可以将生成的静态博客网页托管在服务器上。</li><li>国外的<a href="https://github.com/" target="_blank" rel="noopener"><code>github.com</code></a>和国内的<a href="https://coding.net/" target="_blank" rel="noopener"><code>coding.net</code></a> 都提供免费的 pages 服务，可以用托管博客。</li><li><s><a href="https://c9.io/" target="_blank" rel="noopener"><code>c9.io</code></a>提供免费的在线 webide 服务</s></li><li>好难过，评论说现在<strong>注册 c9 要绑定信用卡</strong>了，这是真的这不是梦。</li></ul><p>优点:</p><ol><li>有网络就可以更新博客，只需要一个浏览器。</li><li>源文件在云端，可下载回本地。</li><li>可实时预览 markdown 文件。</li><li>完善的 linux 终端,有 root 权限。</li></ol><p>我在 c9 的 workspace：<a href="https://ide.c9.io/lengthmin/hexo/" target="_blank" rel="noopener">https://ide.c9.io/lengthmin/hexo/</a></p><a id="more"></a><hr><h1 id="安装"><a class="markdownIt-Anchor" href="#安装">#</a> 安装</h1><h2 id="关于-hexo"><a class="markdownIt-Anchor" href="#关于-hexo">#</a> 关于 Hexo</h2><p>官网： <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p><ul><li>A fast, simple &amp; powerful blog framework</li><li>快速、简洁且高效的博客框架</li></ul><p>作者：<a href="https://zespia.tw/" target="_blank" rel="noopener">Tommy Chen</a></p><h2 id="准备准备"><a class="markdownIt-Anchor" href="#准备准备">#</a> 准备准备</h2><ul><li>注册 <a href="http://coding.net/" target="_blank" rel="noopener">coding.net</a> ｜ <a href="http://c9.io/" target="_blank" rel="noopener">c9.io</a> <br><br>** 注意:c9 没有被墙，但是注册的时候需要输入验证码，验证码使用的是 google 的 reCAPTCHA 服务。因此注册的时候需要科学上网。 **</li></ul><p>在你的 c9 控制台界面，创建一个 workspace，名字 hexo(自己喜欢就好)<br>选择模板为 blank</p><!-- ![](http://7xt1wl.com1.z0.glb.clouddn.com/16-5-22/58944002.jpg) --><p>c9 的控制台是 ubuntu 系统，并且已经装了我们搭建 Hexo 需要的 <code>nodejs</code> 跟 <code>git</code>。<br></p><hr><h2 id="开始安装"><a class="markdownIt-Anchor" href="#开始安装">#</a> 开始安装</h2><p>打开 workspace,在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><!-- ![](http://7xt1wl.com1.z0.glb.clouddn.com/16-5-22/25005751.jpg) --><p>等待安装成功<br><br>创建一个 blog 文件夹，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure><p>安装 Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这样 Hexo 就安装完成了，我们先预览一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 8081</span><br></pre></td></tr></table></figure><blockquote><ul><li>先按照我这么输命令，因为 c9 只允许使用 8080，8081，8082 三个端口，而 Hexo 默认的端口是 4000，所以如果只使用<code>hexo s</code>的话就预览不了。后面讲命令的时候会再提一下。</li></ul></blockquote><!-- ![](http://7xt1wl.com1.z0.glb.clouddn.com/16-5-22/60800577.jpg) --><p>点击终端出现的地址，出现如下图的话就说明安装好了。</p><!-- ![](http://7xt1wl.com1.z0.glb.clouddn.com/16-5-22/45253572.jpg) --><blockquote><p>调教 hexo 请参见<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">《hexo 你的博客》</a></p></blockquote><blockquote><p>在这推荐两个主题： <a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">yelee</a> 跟 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next</a></p></blockquote><hr><h2 id="hexo-的常用命令"><a class="markdownIt-Anchor" href="#hexo-的常用命令">#</a> hexo 的常用命令</h2><p>到这里，已经可以使用 Hexo 了<br>hexo 的常用命令有这些，都要在 Hexo 的根目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"># 编译生成静态文件</span><br><span class="line">hexo d</span><br><span class="line"># 部署博客</span><br><span class="line">hexo g -d</span><br><span class="line"># g 跟 d 一起使用</span><br><span class="line">hexo clean</span><br><span class="line"># 清除以前生成的静态文件。</span><br><span class="line"># 通常，清理一下可以解决大多数问题。</span><br><span class="line">hexo s</span><br><span class="line"># 本地预览博客</span><br><span class="line">hexo new xxx</span><br><span class="line"># 新建一篇标题为xxx的文章</span><br><span class="line">hexo new draft xxx</span><br><span class="line"># 新建一篇标题为xxx的草稿</span><br><span class="line">hexo new page xxx</span><br><span class="line"># 新建一个页面</span><br><span class="line">hexo help</span><br><span class="line">#查看帮助</span><br></pre></td></tr></table></figure><h3 id="在-c9-使用hexo-s时注意事项"><a class="markdownIt-Anchor" href="#在-c9-使用hexo-s时注意事项">#</a> 在 c9 使用<code>hexo s</code>时注意事项</h3><p>c9 只允许用户使用<strong>8080、8081、8082</strong>三个端口。并且 8080 端口已被占用,<br>所以使用默认的<code>hexo server</code>是预览不了的，因为你进不去 4000 这个端口。<br>要把<code>hexo server</code>的命令改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 端口号</span><br><span class="line"># 可简写</span><br><span class="line">hexo s -p 端口号</span><br></pre></td></tr></table></figure><p>也可以在站点配置文件<code>_config.yml</code>加入:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>以后只要使用<code>hexo s</code>就可以了。</p><hr><h1 id="部署博客"><a class="markdownIt-Anchor" href="#部署博客">#</a> 部署博客</h1><h2 id="配置-ssh"><a class="markdownIt-Anchor" href="#配置-ssh">#</a> 配置 SSH</h2><p>coding 的中文 ssh 配置帮助页面<br><a href="https://coding.net/help/doc/git/ssh-key.html" target="_blank" rel="noopener">https://coding.net/help/doc/git/ssh-key.html</a><br>c9 已经默认生成了 ssh 密钥，<br>ssh 密钥在 ~/.ssh/id_rsa.pub <br><br>把这个密钥添加到 coding 就好了。</p><ul><li>点击文件目录右上角的齿轮 - show home in favorite ，就能查看根目录了。<br></li></ul><hr><h2 id="配置-deploy"><a class="markdownIt-Anchor" href="#配置-deploy">#</a> 配置 Deploy</h2><p>在 coding 中创建一个仓库<br>名字为你的 coding 用户名，不区分大小写。<br>创建完仓库后，复制你的 SSH 地址</p><!-- ![](http://7xt1wl.com1.z0.glb.clouddn.com/16-7-7/31815771.jpg) --><p>在 hexo 根目录下的 <code>_config.yml</code>中翻到尾部找到下面这串代码。然后<strong>修改 coding 后面的地址为你的仓库的 ssh 地址，这里的 master 是分支的意思。</strong>。<br></p><blockquote><p>一定要注意改成你自己的 ssh 地址，注意是 ssh 地址。而且<code>coding:</code>后面是有个空格的，这就是 yaml 语言的格式，以后编辑<code>_config.yml</code>也要注意的。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">    coding:</span> <span class="string">git@git.coding.net:Artin/Artin.git,master</span></span><br></pre></td></tr></table></figure><hr><h2 id="部署到-coding-pages-上"><a class="markdownIt-Anchor" href="#部署到-coding-pages-上">#</a> 部署到 Coding Pages 上</h2><p>这是 Coding 关于 Pages 的介绍。</p><blockquote><p><a href="https://coding.net/help/doc/pages/index.html" target="_blank" rel="noopener">https://coding.net/help/doc/pages/index.html</a></p></blockquote><p>首先要安装 git 的插件:<br><br>在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>等待安装完成。</p><p>然后输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><strong>每一次更新博客，都要重新部署。</strong></p><hr><h1 id="一些-tips"><a class="markdownIt-Anchor" href="#一些-tips">#</a> 一些 Tips</h1><h2 id="修改终端时区"><a class="markdownIt-Anchor" href="#修改终端时区">#</a> 修改终端时区</h2><p>c9 的终端默认的时区是 UTC，和中国相差了 8 个时区。<br>终端输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure><p>然后进入图形交互界面，选择<code>Asia/Shanghai</code>时区就行了<br>出现下面的提示即为成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Current default time zone: <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">Local time is now:      Sat Aug  6 20:13:22 CST 2016.</span><br><span class="line">Universal Time is now:  Sat Aug  6 12:13:22 UTC 2016.</span><br></pre></td></tr></table></figure><hr><h2 id="开启-c9-的-markdown-实时预览"><a class="markdownIt-Anchor" href="#开启-c9-的-markdown-实时预览">#</a> 开启 c9 的 markdown 实时预览</h2><p>写 markdown 时点击工具栏的<code>Preview</code>，选择第一个<code>Live Prebiew file</code>。<br>然后屏幕就会变成双栏，左边码 markdown，右边可实时预览。</p><hr><h2 id="未完待续"><a class="markdownIt-Anchor" href="#未完待续">#</a> 未完待续</h2>]]></content:encoded>
      
      <comments>https://lengthmin.me/posts/use-hexo-with-webide/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
